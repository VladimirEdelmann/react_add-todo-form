{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","helpers/helpers.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","isUserExist","cn","TodoList","todos","map","getUserById","userId","usersFromServer","find","todosWithUser","App","useState","setTodos","setTitle","setUserId","titleErrorMessage","setTitleErrorMessage","userErrorMessage","setUserErrorMessage","action","method","htmlFor","type","placeholder","value","onChange","event","target","handleInputChange","disabled","userFromServer","onClick","preventDefault","prev","arr","newTodo","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac73afd2.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import { FC } from 'react';\n\nimport cn from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  const isUserExist = !!user;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        cn('TodoInfo', { 'TodoInfo--completed': completed })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {\n        isUserExist && (<UserInfo user={user} />)\n      }\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\n\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {\n        todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)\n      }\n    </section>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { User, Todo } from './react-app-env';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { getNewId } from './helpers/helpers';\n\nconst getUserById = (userId: number): User | null => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todosWithUser: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState(todosWithUser);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n\n  const [\n    titleErrorMessage,\n    setTitleErrorMessage,\n  ] = useState('');\n  const [\n    userErrorMessage,\n    setUserErrorMessage,\n  ] = useState('');\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title || !userId) {\n      setTitleErrorMessage(!title ? 'Please enter a title' : '');\n      setUserErrorMessage(!userId ? 'Please choose a user' : '');\n\n      return;\n    }\n\n    setTodos(prev => {\n      const newTodo = {\n        id: getNewId(prev),\n        title,\n        completed: false,\n        user: getUserById(userId),\n      };\n\n      return [...prev, newTodo];\n    });\n\n    reset();\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleErrorMessage('');\n    setTitle(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserErrorMessage('');\n    setUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n            {'Title: '}\n          </label>\n\n          <input\n            id=\"titleInput\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => handleInputChange(event)}\n          />\n\n          <label\n            htmlFor=\"titleInput\"\n            className=\"error\"\n          >\n            {titleErrorMessage}\n          </label>\n\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userInput\" className=\"\">User: </label>\n\n          <select\n            id=\"userInput\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleSelectChange}\n          >\n            <option value={0} disabled>Choose a user</option>\n            {\n              usersFromServer.map(userFromServer => (\n                <option value={userFromServer.id}>{userFromServer.name}</option>\n              ))\n            }\n          </select>\n\n          <label\n            htmlFor=\"userInput\"\n            className=\"error\"\n          >\n            {userErrorMessage}\n          </label>\n\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleSubmit}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","export const getNewId = (arr: { id: number }[]) => (\n  Math.max(...arr.map(todo => todo.id)) + 1\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}